---
- name: download prometheus package
  get_url:
    url: https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz
    dest: /tmp/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz

- name: download node_exporter package
  get_url:
    url: https://github.com/prometheus/node_exporter/releases/download/v{{ node_version }}/node_exporter-{{ node_version }}.linux-amd64.tar.gz
    dest: /tmp/node_exporter-{{ node_version }}.linux-amd64.tar.gz
  
- name: create prometheus user
  user:
    name: prometheus
    shell: /bin/false
    create_home: no

- name: create node_exporter user
  user:
    name: node_exporter
    shell: /bin/false
    create_home: no
    
- name: create prometheus /etc directory
  file:
    path: /etc/prometheus
    state: directory
    owner: prometheus
    group: prometheus
    mode: 0755

- name: create prometheus /lib directory
  file:
    path: /var/lib/prometheus
    state: directory
    owner: prometheus
    group: prometheus
    mode: 0755

- name: unzip prometheus-{{ prometheus_version }}.linux-amd64.tar.gz
  unarchive:
    src: /tmp/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz
    dest: /tmp/
    remote_src: yes

- name: unzip node_exporter-{{ node_version }}.linux-amd64.tar.gz
  unarchive:
    src: /tmp/node_exporter-{{ node_version }}.linux-amd64.tar.gz
    dest: /tmp
    remote_src: yes

- name: copy the prometheus binaries to the system path
  copy:
    src: /tmp/prometheus-{{ prometheus_version }}.linux-amd64/{{ item }}
    dest: /usr/local/bin/{{ item }}
    mode: 0775
    owner: prometheus
    group: prometheus
    remote_src: yes
  with_items:
    - prometheus
    - promtool
    

- name: copy prometheus consoles and libraries
  synchronize:
    src: /tmp/prometheus-{{ prometheus_version }}.linux-amd64/{{ item }}
    dest: /etc/prometheus/
  delegate_to: "{{ inventory_hostname }}"
  with_items:
    - consoles
    - console_libraries

- name: set the ownership to prometheus
  file:
    path: /etc/prometheus
    owner: prometheus
    group: prometheus
    recurse: yes
    
- name: copy node_exporter binary to /usr/local/bin
  copy:
    src: /tmp/node_exporter-{{ node_version }}.linux-amd64/{{ item }}
    dest: /usr/local/bin/{{ item }}
    owner: node_exporter
    group: node_exporter
    mode: 0775
    remote_src: yes
  with_items:
    - node_exporter

- name: move the alert.rules to the prometheus directory
  copy:
    src: ../files/alert.rules
    dest: /etc/prometheus/
    owner: prometheus
    group: prometheus

- name: move the prometheus.yml file to prometheus directory in host
  copy:
    src: ../files/prometheus.yml
    dest: /etc/prometheus/
    owner: prometheus
    group: prometheus
  
- name: prometheus systemd service
  copy:
    src: ../files/prometheus.service
    dest: /etc/systemd/system/prometheus.service
  when: ansible_distribution == "CentOS" or ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"


- name: node_exporter systemd service
  copy:
    src: ../files/node_exporter.service
    dest: /etc/systemd/system/node_exporter.service
  when: ansible_distribution == "CentOS" or ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"

    
- name: reload systemd
  systemd: 
    daemon_reload: yes
  when: ansible_distribution == "CentOS" or ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"


- name: start prometheus
  systemd:
    state: started
    name: prometheus
  when: ansible_distribution == "CentOS" or ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"

- name: start node_exporter
  systemd:
    state: started
    name: node_exporter
  when: ansible_distribution == "CentOS" or ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"

- name: prometheus service (systemV)
  copy:
    src: ../files/{{ item }}
    dest: /etc/rc.d/init.d/{{ item }}
    mode: 0775
  with_items:
    - prometheus
    - node_exporter  
  when: ansible_distribution == "Amazon"

- name: restart services
  service:
    name: "{{ item }}"
    state: started
  with_items:
    - prometheus
    - node_exporter
  when: ansible_distribution == "Amazon"

- name: enable services
  service:
    name: "{{ item }}"
    enabled: yes
  with_items:
    - prometheus
    - node_exporter
  when: ansible_distribution == "Amazon"


- name: remove temporary files
  file:
    path: /tmp/
    state: "{{ item }}"
  with_items:
    - absent
    - directory

